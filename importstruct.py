import re
import sys
import struct

NAMESIZE=34
MAXGROUPS=100
MAXPEERS=100
MAXBUTTS=8
MAXSCENES=16
MAXTIMES=20
f = open("../ledlys_embedded/msgs.h", "r")

inputstruct = f.read()
currentstruct = None
maindict = {}
translatedict={"uint8_t" : "B","uint16_t" : "H", "uint32_t" : "I","float" : "f","int8_t" : "b","int16_t" : "h","int32_t":"i", "char": "s","struct":""}
for l in inputstruct.splitlines():
    l = l.strip()
    pattern = '^struct (.*)\{$'
    result = re.match(pattern, l)
    #print("-"+l+"-")
    if l == "":
        #print("blankline no thankz")
        _=None
    elif l[0] == "/" or l.strip() == "PAD" :
        #print("These are not the lines you are looking for: " + l)
        _=None
    elif l.strip() == "};":
        print("End of struct: " + str(currentstruct))
        currentstruct = None
    elif result:
        currentstruct = str(result.group(1)).strip()
        print("Start of struct: " + currentstruct)
        maindict[currentstruct] = {}
        maindict[currentstruct]["keys"] = []
        maindict[currentstruct]["pack"] = ""
    elif currentstruct:
        pattern = '^([a-zA-Z0-9_]+)[ ]*([a-zA-Z0-9_]+|[a-zA-Z0-9_, ]+)(?:\[([a-zA-Z0-9_]*)\])?(?: ([a-zA-Z0-9_]*))?\;(?:.*)?$'
        result2 = re.match(pattern, l)
        if result2:
            keys = str(result2.group(2)).split(",")
            for key in keys:
                key = key.strip()
                if result2.group(1) in  translatedict:
                        if result2.group(1) == "struct":
                            maindict[currentstruct]["pack"] += maindict[key]["pack"]
                            if str(result2.group(4)) == "hdr":
                                maindict[currentstruct]["pack"] += "xx"
                        elif result2.group(3) :
                            maindict[currentstruct]["pack"] += str(int(eval(result2.group(3))))
                        maindict[currentstruct]["pack"] += translatedict[result2.group(1)]
                else:
                    print("datatype not handled: " + result2.group(1))
                if str(result2.group(4)) == "hdr":
                    maindict[currentstruct]["keys"] = maindict[key]["keys"]
                elif result2.group(3) and result2.group(1) != "char":
                    for x in range(int(eval(result2.group(3)))):
                        maindict[currentstruct]["keys"].append(str(key)+"_"+str(x+1))
                else:
                    maindict[currentstruct]["keys"].append(key)
        else:
            print("not handled:" + l)
    else:
        print("line not inside struct:" + l)

#print(maindict)
testreport = b'\x00\x00\x00\x00\n\x00\x00\x00\xacP\x00\x00\xacP\x00\x00\xac\xd05\x02\x04\x02\x00\x00\n\x14\x00\x9c\xb6\x11Verksted Benk\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04r\x01\x00\x016\x00\x01\x00\x00d\x00\x08\x00\x01\x00\xacP\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x05\nc\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\x00\x80\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00V\xf8\xbb<\x01\x00\x00\x00\x84 \x00\x00\x00\x00 A\x00\x00\x00\x00\xe9\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xaf&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\xae&\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\xd7^\xa5\x05\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00+\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x85\x99,\x01\x00\x00\x00\x00\x00\x00\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x02\x00\x00\x00\x00\x00\x00\x00d\x00sarve\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
#print(len(testreport))
result = list(struct.unpack(maindict['msg_report_t']["pack"],testreport))
result=dict(zip(maindict['msg_report_t']["keys"], result))
print(result)